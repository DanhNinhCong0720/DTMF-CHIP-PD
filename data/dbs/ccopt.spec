###############################################################
#  Generated by:      Cadence Innovus 22.32-s080_1
#  OS:                Linux x86_64(Host ID seh-23.novalocal)
#  Generated on:      Sun May 26 16:11:09 2024
#  Design:            DTMF_CHIP
#  Command:           create_clock_tree_spec -out_file ../data/dbs/ccopt.spec
###############################################################
#-------------------------------------------------------------------------------
# Clock tree setup script - dialect: Common UI
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

if { [get_db clock_trees] != {} } {
  error {Cannot run clock tree spec: clock trees are already defined.}
}

namespace eval ::ccopt {}
namespace eval ::ccopt::ilm {}
set ::ccopt::ilm::ccoptSpecRestoreData {}
# Start by checking for unflattened ILMs.
# Will flatten if so and then check the db sync.
if { [catch {ccopt_check_and_flatten_ilms_no_restore}] } {
  return -code error
}
# cache the value of the restore command output by the ILM flattening code
set ::ccopt::ilm::ccoptSpecRestoreData $::ccopt::ilm::ccoptRestoreILMState

# Timing through the following pins was disabled by case analysis
# These pins are ignore skew pins
set_db pin:DTMF_INST/TDSP_DS_CS_INST/i_4380/B1 .cts_sink_type ignore
set_db pin:DTMF_INST/TDSP_DS_CS_INST/i_4380/B1 .cts_sink_type_reasons set_case_analysis
set_db pin:DTMF_INST/TDSP_DS_CS_INST/i_4383/B1 .cts_sink_type ignore
set_db pin:DTMF_INST/TDSP_DS_CS_INST/i_4383/B1 .cts_sink_type_reasons set_case_analysis

# The following pins are clock sources
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_150/Y .cts_is_sdc_clock_root true
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_152/Y .cts_is_sdc_clock_root true
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_154/Y .cts_is_sdc_clock_root true
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_156/Y .cts_is_sdc_clock_root true
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_158/Y .cts_is_sdc_clock_root true
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_160/Y .cts_is_sdc_clock_root true

# Clocks present at pin DTMF_INST/TEST_CONTROL_INST/i_152/Y
#   vclk2 (period 14.000ns) in timing_config default_constraint_mode([../INPUTS/constraints/dtmf.sdc])
create_clock_tree -name vclk2 -source DTMF_INST/TEST_CONTROL_INST/i_152/Y -no_skew_group
# Clock period setting for source pin of vclk2
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_152/Y .cts_clock_period 14

# Clocks present at pin DTMF_INST/TEST_CONTROL_INST/i_154/Y
#   vclk2 (period 14.000ns) in timing_config default_constraint_mode([../INPUTS/constraints/dtmf.sdc])
create_clock_tree -name vclk2<1> -source DTMF_INST/TEST_CONTROL_INST/i_154/Y -no_skew_group
# Clock period setting for source pin of vclk2<1>
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_154/Y .cts_clock_period 14

# Clocks present at pin DTMF_INST/TEST_CONTROL_INST/i_156/Y
#   vclk2 (period 14.000ns) in timing_config default_constraint_mode([../INPUTS/constraints/dtmf.sdc])
create_clock_tree -name vclk2<2> -source DTMF_INST/TEST_CONTROL_INST/i_156/Y -no_skew_group
# Clock period setting for source pin of vclk2<2>
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_156/Y .cts_clock_period 14

# Clocks present at pin DTMF_INST/TEST_CONTROL_INST/i_158/Y
#   vclk2 (period 14.000ns) in timing_config default_constraint_mode([../INPUTS/constraints/dtmf.sdc])
create_clock_tree -name vclk2<3> -source DTMF_INST/TEST_CONTROL_INST/i_158/Y -no_skew_group
# Clock period setting for source pin of vclk2<3>
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_158/Y .cts_clock_period 14

# Clocks present at pin DTMF_INST/TEST_CONTROL_INST/i_160/Y
#   vclk2 (period 14.000ns) in timing_config default_constraint_mode([../INPUTS/constraints/dtmf.sdc])
create_clock_tree -name vclk2<4> -source DTMF_INST/TEST_CONTROL_INST/i_160/Y -no_skew_group
# Clock period setting for source pin of vclk2<4>
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_160/Y .cts_clock_period 14

# Clocks present at pin DTMF_INST/TEST_CONTROL_INST/i_150/Y
#   vclk1 (period 7.000ns) in timing_config default_constraint_mode([../INPUTS/constraints/dtmf.sdc])
create_clock_tree -name vclk1 -source DTMF_INST/TEST_CONTROL_INST/i_150/Y -no_skew_group
# Clock period setting for source pin of vclk1
set_db pin:DTMF_INST/TEST_CONTROL_INST/i_150/Y .cts_clock_period 7

##############################################################################
##
## Timing connectivity based skew groups: off
##
##############################################################################
set_db cts_timing_connectivity_info {}

# Skew group to balance non generated clock:vclk1 in timing_config:default_constraint_mode (sdc ../INPUTS/constraints/dtmf.sdc)
create_skew_group -name vclk1/default_constraint_mode -sources DTMF_INST/TEST_CONTROL_INST/i_150/Y -auto_sinks
set_db skew_group:vclk1/default_constraint_mode .cts_skew_group_include_source_latency true
set_db skew_group:vclk1/default_constraint_mode .cts_skew_group_created_from_clock vclk1
set_db skew_group:vclk1/default_constraint_mode .cts_skew_group_created_from_constraint_modes {default_constraint_mode  }
set_db skew_group:vclk1/default_constraint_mode .cts_skew_group_created_from_delay_corners {default_delay_corner_max default_delay_corner_min}

# Skew group to balance non generated clock:vclk2 in timing_config:default_constraint_mode (sdc ../INPUTS/constraints/dtmf.sdc)
create_skew_group -name vclk2/default_constraint_mode -sources {DTMF_INST/TEST_CONTROL_INST/i_152/Y DTMF_INST/TEST_CONTROL_INST/i_154/Y DTMF_INST/TEST_CONTROL_INST/i_156/Y DTMF_INST/TEST_CONTROL_INST/i_158/Y DTMF_INST/TEST_CONTROL_INST/i_160/Y} -auto_sinks
set_db skew_group:vclk2/default_constraint_mode .cts_skew_group_include_source_latency true
set_db skew_group:vclk2/default_constraint_mode .cts_skew_group_created_from_clock vclk2
set_db skew_group:vclk2/default_constraint_mode .cts_skew_group_created_from_constraint_modes {default_constraint_mode  }
set_db skew_group:vclk2/default_constraint_mode .cts_skew_group_created_from_delay_corners {default_delay_corner_max default_delay_corner_min}


check_clock_tree_convergence
# Restore the ILM status if possible
if { [get_db ccopt_auto_design_state_for_ilms] == 0 } {
  if {$::ccopt::ilm::ccoptSpecRestoreData != {} } {
    eval $::ccopt::ilm::ccoptSpecRestoreData
  }
}

